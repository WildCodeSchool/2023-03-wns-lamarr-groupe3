name: staging

on:
  push:
    branches: ["staging"]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Goto frontend and run tests
        run: cd frontend && npm i && npm run test

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: build and run Docker Container
        run: docker-compose -f docker-compose.dev.yml up -d
      - name: Seed database
        run: cd backend && npm i && npm run seed
        env:
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          DB_NAME: postgres
          SEED_HOST: localhost
          SEED_ADMIN_MAIL: ${{ secrets.STAGING_SEED_ADMIN_MAIL }}
          SEED_ADMIN_PASSWORD: ${{ secrets.STAGING_SEED_ADMIN_PASSWORD }}

      - name: Goto backend and run tests
        run: cd backend npm run test
        env:
          TOKEN: ${{ secrets.STAGING_TOKEN }}
          DB_HOST: postgres
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          DB_NAME: postgres
          SEED_HOST: localhost
          SEED_ADMIN_MAIL: ${{ secrets.STAGING_SEED_ADMIN_MAIL }}
          SEED_ADMIN_PASSWORD: ${{ secrets.STAGING_SEED_ADMIN_PASSWORD }}
          FRONTEND_URL: http://localhost:3000
          DEPLOY_URL: https://city-guide.aimach.fr
          BACK_PORT: 5000

  # update-docker-image-frontend:
  #   needs: test-frontend
  #   if: github.ref == 'refs/heads/dev'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         push: true
  #         context: "{{defaultContext}}:frontend"
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/cg-staging-frontend:latest

  # update-docker-image-backend:
  #   # needs: test-backend
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         push: true
  #         context: "{{defaultContext}}:backend"
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/cg-staging-backend:latest

  # send_staging_webhook:
  #   needs:
  #     - update-docker-image-frontend
  #     - update-docker-image-backend

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Send Webhook
  #       env:
  #         WEBHOOK_URL: ${{ secrets.WEBHOOK_STAGING_URL }} # Define the webhook URL as a secret in your repository
  #       run: |
  #         curl -X POST -H "Content-Type: application/json" -d '{
  #           "repository": "${{ github.repository }}",
  #           "ref": "${{ github.ref }}",
  #           "commits": ${{ toJson(github.event.commits) }}
  #         }' $WEBHOOK_URL
